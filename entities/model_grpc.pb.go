// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RandomiseClient is the client API for Randomise service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RandomiseClient interface {
	Random(ctx context.Context, in *CommonRequest, opts ...grpc.CallOption) (*CommonResponse, error)
	RandomStream(ctx context.Context, in *CommonRequest, opts ...grpc.CallOption) (Randomise_RandomStreamClient, error)
}

type randomiseClient struct {
	cc grpc.ClientConnInterface
}

func NewRandomiseClient(cc grpc.ClientConnInterface) RandomiseClient {
	return &randomiseClient{cc}
}

func (c *randomiseClient) Random(ctx context.Context, in *CommonRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, "/entities.randomise/random", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *randomiseClient) RandomStream(ctx context.Context, in *CommonRequest, opts ...grpc.CallOption) (Randomise_RandomStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Randomise_ServiceDesc.Streams[0], "/entities.randomise/randomStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &randomiseRandomStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Randomise_RandomStreamClient interface {
	Recv() (*CommonResponse, error)
	grpc.ClientStream
}

type randomiseRandomStreamClient struct {
	grpc.ClientStream
}

func (x *randomiseRandomStreamClient) Recv() (*CommonResponse, error) {
	m := new(CommonResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RandomiseServer is the server API for Randomise service.
// All implementations must embed UnimplementedRandomiseServer
// for forward compatibility
type RandomiseServer interface {
	Random(context.Context, *CommonRequest) (*CommonResponse, error)
	RandomStream(*CommonRequest, Randomise_RandomStreamServer) error
	mustEmbedUnimplementedRandomiseServer()
}

// UnimplementedRandomiseServer must be embedded to have forward compatible implementations.
type UnimplementedRandomiseServer struct {
}

func (UnimplementedRandomiseServer) Random(context.Context, *CommonRequest) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Random not implemented")
}
func (UnimplementedRandomiseServer) RandomStream(*CommonRequest, Randomise_RandomStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method RandomStream not implemented")
}
func (UnimplementedRandomiseServer) mustEmbedUnimplementedRandomiseServer() {}

// UnsafeRandomiseServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RandomiseServer will
// result in compilation errors.
type UnsafeRandomiseServer interface {
	mustEmbedUnimplementedRandomiseServer()
}

func RegisterRandomiseServer(s grpc.ServiceRegistrar, srv RandomiseServer) {
	s.RegisterService(&Randomise_ServiceDesc, srv)
}

func _Randomise_Random_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RandomiseServer).Random(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entities.randomise/random",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RandomiseServer).Random(ctx, req.(*CommonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Randomise_RandomStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CommonRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RandomiseServer).RandomStream(m, &randomiseRandomStreamServer{stream})
}

type Randomise_RandomStreamServer interface {
	Send(*CommonResponse) error
	grpc.ServerStream
}

type randomiseRandomStreamServer struct {
	grpc.ServerStream
}

func (x *randomiseRandomStreamServer) Send(m *CommonResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Randomise_ServiceDesc is the grpc.ServiceDesc for Randomise service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Randomise_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "entities.randomise",
	HandlerType: (*RandomiseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "random",
			Handler:    _Randomise_Random_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "randomStream",
			Handler:       _Randomise_RandomStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "model.proto",
}
